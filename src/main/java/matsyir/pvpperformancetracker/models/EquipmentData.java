/*
 * Copyright (c) 2020, Mazhar <https://twitter.com/maz_rs>
 * Copyright (c) 2020, Matsyir <https://github.com/matsyir>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package matsyir.pvpperformancetracker.models;
import java.util.HashMap;
import java.util.Map;
import lombok.Getter;
import matsyir.pvpperformancetracker.PvpPerformanceTrackerPlugin;
import matsyir.pvpperformancetracker.utils.PvpPerformanceTrackerUtils;
import net.runelite.api.ItemID;
import net.runelite.api.kit.KitType;
import org.apache.commons.lang3.ArrayUtils;

// Mostly to help fetch LMS gear stats, since LMS items are copies of real items, so their stats aren't
// cached like most items. Each LMS item will have the 'real' itemId so the stats can be looked up.
// A few non-LMS range weapons will be saved in order to help estimate ammo type/range strength based
// on current weapon itemId, or to determine special attacks used.
public enum EquipmentData
{
	// Non-LMS items:
	DRAGON_CROSSBOW(ItemID.DRAGON_CROSSBOW),
	KARILS_CROSSBOW(ItemID.KARILS_CROSSBOW, ItemID.KARILS_CROSSBOW_100, ItemID.KARILS_CROSSBOW_75, ItemID.KARILS_CROSSBOW_50, ItemID.KARILS_CROSSBOW_25, ItemID.KARILS_CROSSBOW_0),
	HUNTERS_SUNLIGHT_CROSSBOW(ItemID.HUNTERS_SUNLIGHT_CROSSBOW),
	BURNING_CLAWS(ItemID.BURNING_CLAWS),
	DRAGON_HUNTER_CROSSBOW(ItemID.DRAGON_HUNTER_CROSSBOW),
	MAGIC_SHORTBOW(ItemID.MAGIC_SHORTBOW),
	MAGIC_SHORTBOW_I(ItemID.MAGIC_SHORTBOW_I),
	TOXIC_BLOWPIPE(ItemID.TOXIC_BLOWPIPE),
	VOLATILE_NIGHTMARE_STAFF(ItemID.VOLATILE_NIGHTMARE_STAFF, ItemID.VOLATILE_NIGHTMARE_STAFF_DEADMAN),
	//CRAWS_BOW(22550), // ammo bonus is built into weapon so we don't need to include it
	SMOKE_BATTLESTAFF(ItemID.SMOKE_BATTLESTAFF),
	VOID_MAGE_HELM(ItemID.VOID_MAGE_HELM, ItemID.VOID_MAGE_HELM_L),
	VOID_RANGE_HELM(ItemID.VOID_RANGER_HELM, ItemID.VOID_RANGER_HELM_L),
	VOID_MELEE_HELM(ItemID.VOID_MELEE_HELM, ItemID.VOID_MELEE_HELM_L),
	VOID_ELITE_BODY(ItemID.ELITE_VOID_TOP, ItemID.ELITE_VOID_TOP_L),
	VOID_ELITE_LEGS(ItemID.ELITE_VOID_ROBE, ItemID.ELITE_VOID_ROBE_L),
	VOID_GLOVES(ItemID.VOID_KNIGHT_GLOVES, ItemID.VOID_KNIGHT_GLOVES_L),
	VOID_BODY(ItemID.VOID_KNIGHT_TOP, ItemID.VOID_KNIGHT_TOP_L),
	VOID_LEGS(ItemID.VOID_KNIGHT_ROBE, ItemID.VOID_KNIGHT_ROBE_L),
	CRYSTAL_HELM(ItemID.CRYSTAL_HELM),
	CRYSTAL_BODY(ItemID.CRYSTAL_BODY),
	CRYSTAL_LEGS(ItemID.CRYSTAL_LEGS),
	CRYSTAL_BOW(ItemID.CRYSTAL_BOW_FULL, ItemID.CRYSTAL_BOW, ItemID.CRYSTAL_BOW_110, ItemID.CRYSTAL_BOW_210, ItemID.CRYSTAL_BOW_310, ItemID.CRYSTAL_BOW_410, ItemID.CRYSTAL_BOW_510, ItemID.CRYSTAL_BOW_610, ItemID.CRYSTAL_BOW_710, ItemID.CRYSTAL_BOW_810, ItemID.CRYSTAL_BOW_910),
	CRYSTAL_BOW_I(ItemID.CRYSTAL_BOW_FULL_I, ItemID.CRYSTAL_BOW_110_I, ItemID.CRYSTAL_BOW_210_I, ItemID.CRYSTAL_BOW_310_I, ItemID.CRYSTAL_BOW_410_I, ItemID.CRYSTAL_BOW_510_I, ItemID.CRYSTAL_BOW_610_I, ItemID.CRYSTAL_BOW_710_I, ItemID.CRYSTAL_BOW_810_I, ItemID.CRYSTAL_BOW_910_I),
	DRAGON_LONGSWORD(ItemID.DRAGON_LONGSWORD),
	OSMUMTENS_FANG(ItemID.OSMUMTENS_FANG, ItemID.OSMUMTENS_FANG_OR),

	// LMS items:
	RUNE_CROSSBOW(ItemID.RUNE_CROSSBOW, ItemID.RUNE_CROSSBOW_23601),
	ARMADYL_CROSSBOW(ItemID.ARMADYL_CROSSBOW, ItemID.ARMADYL_CROSSBOW_23611),
	DARK_BOW(ItemID.DARK_BOW, ItemID.DARK_BOW_20408, ItemID.DARK_BOW_12765, ItemID.DARK_BOW_12766, ItemID.DARK_BOW_12767, ItemID.DARK_BOW_12768, ItemID.DARK_BOW_DEADMAN),
	HEAVY_BALLISTA(ItemID.HEAVY_BALLISTA, ItemID.HEAVY_BALLISTA_23630),

	STATIUS_WARHAMMER(ItemID.STATIUSS_WARHAMMER, ItemID.STATIUSS_WARHAMMER_23620),
	VESTAS_LONGSWORD(ItemID.VESTAS_LONGSWORD, ItemID.VESTAS_LONGSWORD_23615, ItemID.VESTAS_BLIGHTED_LONGSWORD),
	ARMADYL_GODSWORD(ItemID.ARMADYL_GODSWORD, ItemID.ARMADYL_GODSWORD_20593, ItemID.ARMADYL_GODSWORD_OR, ItemID.ARMADYL_GODSWORD_DEADMAN),
	DRAGON_CLAWS(ItemID.DRAGON_CLAWS, ItemID.DRAGON_CLAWS_20784),
	DRAGON_DAGGER(ItemID.DRAGON_DAGGER, ItemID.DRAGON_DAGGER_20407, ItemID.DRAGON_DAGGERP, ItemID.DRAGON_DAGGERP_5680, ItemID.DRAGON_DAGGERP_5698),
	GRANITE_MAUL(ItemID.GRANITE_MAUL, ItemID.GRANITE_MAUL_12848, ItemID.GRANITE_MAUL_20557, ItemID.GRANITE_MAUL_24225, ItemID.GRANITE_MAUL_24227),
	AMULET_OF_FURY(ItemID.AMULET_OF_FURY, ItemID.AMULET_OF_FURY_23640),
	BANDOS_TASSETS(ItemID.BANDOS_TASSETS, ItemID.BANDOS_TASSETS_23646),
	BLESSED_SPIRIT_SHIELD(ItemID.BLESSED_SPIRIT_SHIELD, ItemID.BLESSED_SPIRIT_SHIELD_23642),
	DHAROKS_HELM(ItemID.DHAROKS_HELM, ItemID.DHAROKS_HELM_23639),
	DHAROKS_PLATELEGS(ItemID.DHAROKS_PLATELEGS, ItemID.DHAROKS_PLATELEGS_23633),
	GUTHANS_HELM(ItemID.GUTHANS_HELM, ItemID.GUTHANS_HELM_23638),
	KARILS_TOP(ItemID.KARILS_LEATHERTOP, ItemID.KARILS_LEATHERTOP_23632),
	TORAGS_HELM(ItemID.TORAGS_HELM, ItemID.TORAGS_HELM_23637),
	TORAGS_PLATELEGS(ItemID.TORAGS_PLATELEGS, ItemID.TORAGS_PLATELEGS_23634),
	VERACS_HELM(ItemID.VERACS_HELM, ItemID.VERACS_HELM_23636),
	VERACS_PLATESKIRT(ItemID.VERACS_PLATESKIRT, ItemID.VERACS_PLATESKIRT_23635),
	MORRIGANS_JAVELIN(ItemID.MORRIGANS_JAVELIN, ItemID.MORRIGANS_JAVELIN_23619),
	SPIRIT_SHIELD(ItemID.SPIRIT_SHIELD, ItemID.SPIRIT_SHIELD_23599),
	HELM_OF_NEITIZNOT(ItemID.HELM_OF_NEITIZNOT, ItemID.HELM_OF_NEITIZNOT_23591),
	AMULET_OF_GLORY(ItemID.AMULET_OF_GLORY, ItemID.AMULET_OF_GLORY_20586),
	ABYSSAL_WHIP(ItemID.ABYSSAL_WHIP, ItemID.ABYSSAL_WHIP_20405),
	DRAGON_DEFENDER(ItemID.DRAGON_DEFENDER, ItemID.DRAGON_DEFENDER_23597),
	BLACK_DHIDE_BODY(ItemID.BLACK_DHIDE_BODY, ItemID.BLACK_DHIDE_BODY_20423),
	RUNE_PLATELEGS(ItemID.RUNE_PLATELEGS, ItemID.RUNE_PLATELEGS_20422),
	CLIMBING_BOOTS(ItemID.CLIMBING_BOOTS, ItemID.CLIMBING_BOOTS_20578),
	BARROWS_GLOVES(ItemID.BARROWS_GLOVES, ItemID.BARROWS_GLOVES_23593),
	ELDER_MAUL(ItemID.ELDER_MAUL, ItemID.ELDER_MAUL_21205),
	INFERNAL_CAPE(ItemID.INFERNAL_CAPE, ItemID.INFERNAL_CAPE_23622),
	GHRAZI_RAPIER(ItemID.GHRAZI_RAPIER, ItemID.GHRAZI_RAPIER_23628),

	ZURIELS_STAFF(ItemID.ZURIELS_STAFF, ItemID.ZURIELS_STAFF_23617),
	STAFF_OF_THE_DEAD(ItemID.STAFF_OF_THE_DEAD, ItemID.STAFF_OF_THE_DEAD_23613),
	KODAI_WAND(ItemID.KODAI_WAND, ItemID.KODAI_WAND_23626),
	AHRIMS_STAFF(ItemID.AHRIMS_STAFF, ItemID.AHRIMS_STAFF_23653),
	MYSTIC_ROBE_TOP(ItemID.MYSTIC_ROBE_TOP, ItemID.MYSTIC_ROBE_TOP_20425, ItemID.MYSTIC_ROBE_TOP_DARK_27158, ItemID.MYSTIC_ROBE_TOP_LIGHT_27160),
	MYSTIC_ROBE_BOTTOM(ItemID.MYSTIC_ROBE_BOTTOM, ItemID.MYSTIC_ROBE_BOTTOM_20426, ItemID.MYSTIC_ROBE_BOTTOM_DARK_27159, ItemID.MYSTIC_ROBE_BOTTOM_LIGHT_27161),
	AHRIMS_ROBE_TOP(ItemID.AHRIMS_ROBETOP, ItemID.AHRIMS_ROBETOP_20598),
	AHRIMS_ROBE_SKIRT(ItemID.AHRIMS_ROBESKIRT, ItemID.AHRIMS_ROBESKIRT_20599),
	OCCULT_NECKLACE(ItemID.OCCULT_NECKLACE, ItemID.OCCULT_NECKLACE_23654),
	MAGES_BOOK(ItemID.MAGES_BOOK, ItemID.MAGES_BOOK_23652),
	ETERNAL_BOOTS(ItemID.ETERNAL_BOOTS, ItemID.ETERNAL_BOOTS_23644),
	IMBUED_ZAMORAK_CAPE(ItemID.IMBUED_ZAMORAK_CAPE, ItemID.IMBUED_ZAMORAK_CAPE_23605),
	IMBUED_GUTHIX_CAPE(ItemID.IMBUED_GUTHIX_CAPE, ItemID.IMBUED_GUTHIX_CAPE_23603),
	IMBUED_SARADOMIN_CAPE(ItemID.IMBUED_SARADOMIN_CAPE, ItemID.IMBUED_SARADOMIN_CAPE_23607),

	TOME_OF_FIRE(ItemID.TOME_OF_FIRE, ItemID.TOME_OF_FIRE_27358), // (charged tome)
	WIZARD_BOOTS(ItemID.WIZARD_BOOTS, ItemID.WIZARD_BOOTS_27162),
	GUTHIX_HALO(ItemID.GUTHIX_HALO, ItemID.GUTHIX_HALO_27163),
	ZAMORAK_HALO(ItemID.ZAMORAK_HALO, ItemID.ZAMORAK_HALO_27164),
	SARADOMIN_HALO(ItemID.SARADOMIN_HALO, ItemID.SARADOMIN_HALO_27165),
	GHOSTLY_HOOD(ItemID.GHOSTLY_HOOD, ItemID.GHOSTLY_HOOD_27166),
	GHOSTLY_ROBETOP(ItemID.GHOSTLY_ROBE, ItemID.GHOSTLY_ROBE_27167),
	GHOSTLY_ROBE(ItemID.GHOSTLY_ROBE_6108, ItemID.GHOSTLY_ROBE_27168),
	BERSERKER_HELM(ItemID.BERSERKER_HELM, ItemID.BERSERKER_HELM_27169),
	INFINITY_BOOTS(ItemID.INFINITY_BOOTS, ItemID.INFINITY_BOOTS_27170),
	TORMENTED_BRACELET(ItemID.TORMENTED_BRACELET, ItemID.TORMENTED_BRACELET_27171),
	NECKLACE_OF_ANGUISH(ItemID.NECKLACE_OF_ANGUISH, ItemID.NECKLACE_OF_ANGUISH_27172, ItemID.NECKLACE_OF_ANGUISH_OR),
	ELDER_CHAOS_TOP(ItemID.ELDER_CHAOS_TOP, ItemID.ELDER_CHAOS_TOP_27174, ItemID.ELDER_CHAOS_TOP_OR),
	ELDER_CHAOS_ROBE(ItemID.ELDER_CHAOS_ROBE, ItemID.ELDER_CHAOS_ROBE_27175, ItemID.ELDER_CHAOS_ROBE_OR),
	ELDER_CHAOS_HOOD(ItemID.ELDER_CHAOS_HOOD, ItemID.ELDER_CHAOS_HOOD_27176, ItemID.ELDER_CHAOS_HOOD_OR),
	FREMENNIK_KILT(ItemID.FREMENNIK_KILT, ItemID.FREMENNIK_KILT_27177),
	SPIKED_MANACLES(ItemID.SPIKED_MANACLES, ItemID.SPIKED_MANACLES_27178),
	RANGERS_TUNIC(ItemID.RANGERS_TUNIC, ItemID.RANGERS_TUNIC_27179),
	GUTHIX_CHAPS(ItemID.GUTHIX_CHAPS, ItemID.GUTHIX_CHAPS_27180),
	ZAMORAK_CHAPS(ItemID.ZAMORAK_CHAPS, ItemID.ZAMORAK_CHAPS_27181),
	SARADOMIN_CHAPS(ItemID.SARADOMIN_CHAPS, ItemID.SARADOMIN_CHAPS_27182),
	_3RD_AGE_MAGE_HAT(ItemID._3RD_AGE_MAGE_HAT, ItemID._3RD_AGE_MAGE_HAT_27183),
	ANCIENT_GODSWORD(ItemID.ANCIENT_GODSWORD, ItemID.ANCIENT_GODSWORD_27184),
	RUNE_DEFENDER(ItemID.RUNE_DEFENDER, ItemID.RUNE_DEFENDER_27185),
	ZARYTE_CROSSBOW(ItemID.ZARYTE_CROSSBOW, ItemID.ZARYTE_CROSSBOW_27186),
	BOW_OF_FAERDHINEN(ItemID.BOW_OF_FAERDHINEN, ItemID.BOW_OF_FAERDHINEN_C, ItemID.BOW_OF_FAERDHINEN_C_25869, ItemID.BOW_OF_FAERDHINEN_C_25884, ItemID.BOW_OF_FAERDHINEN_C_25886, ItemID.BOW_OF_FAERDHINEN_C_25888, ItemID.BOW_OF_FAERDHINEN_C_25890, ItemID.BOW_OF_FAERDHINEN_C_25892, ItemID.BOW_OF_FAERDHINEN_C_25894, ItemID.BOW_OF_FAERDHINEN_C_25896, ItemID.BOW_OF_FAERDHINEN_27187),
	LIGHT_BALLISTA(ItemID.LIGHT_BALLISTA, ItemID.LIGHT_BALLISTA_27188),
	VERACS_FLAIL(ItemID.VERACS_FLAIL, ItemID.VERACS_FLAIL_27189),
	VERACS_BRASSARD(ItemID.VERACS_BRASSARD, ItemID.VERACS_BRASSARD_27190),
	UNHOLY_BOOK(ItemID.UNHOLY_BOOK, ItemID.UNHOLY_BOOK_27191),
	// hmmmm OPAL_DRAGON_BOLTS_E(ItemID.OPAL_DRAGON_BOLTS_E, ItemID.OPAL_DRAGON_BOLTS_E_27192)
	ANCESTRAL_ROBE_TOP(ItemID.ANCESTRAL_ROBE_TOP, ItemID.ANCESTRAL_ROBE_TOP_27193, ItemID.TWISTED_ANCESTRAL_ROBE_TOP),
	ANCESTRAL_ROBE_BOTTOM(ItemID.ANCESTRAL_ROBE_BOTTOM, ItemID.ANCESTRAL_ROBE_BOTTOM_27194, ItemID.TWISTED_ANCESTRAL_ROBE_BOTTOM),
	INQUISITORS_GREAT_HELM(ItemID.INQUISITORS_GREAT_HELM, ItemID.INQUISITORS_GREAT_HELM_27195),
	INQUISITORS_HAUBERK(ItemID.INQUISITORS_HAUBERK, ItemID.INQUISITORS_HAUBERK_27196),
	INQUISITORS_PLATESKIRT(ItemID.INQUISITORS_PLATESKIRT, ItemID.INQUISITORS_PLATESKIRT_27197),
	INQUISITORS_MACE(ItemID.INQUISITORS_MACE, ItemID.INQUISITORS_MACE_27198),
	_3RD_AGE_RANGE_TOP(ItemID._3RD_AGE_RANGE_TOP, ItemID._3RD_AGE_RANGE_TOP_27199),
	_3RD_AGE_RANGE_LEGS(ItemID._3RD_AGE_RANGE_LEGS, ItemID._3RD_AGE_RANGE_LEGS_27200),
	_3RD_AGE_RANGE_COIF(ItemID._3RD_AGE_RANGE_COIF, ItemID._3RD_AGE_RANGE_COIF_27201),

	DRAGON_WARHAMMER(ItemID.DRAGON_WARHAMMER, ItemID.DRAGON_WARHAMMER_20785),
	VOIDWAKER(ItemID.VOIDWAKER, ItemID.VOIDWAKER_27869, ItemID.VOIDWAKER_DEADMAN),

	DUAL_MACUAHUITL(ItemID.DUAL_MACUAHUITL, ItemID.DUAL_MACUAHUITL_29850),
	BLOOD_MOON_CHESTPLATE(ItemID.BLOOD_MOON_CHESTPLATE, ItemID.BLOOD_MOON_CHESTPLATE_29846),
	BLOOD_MOON_HELM(ItemID.BLOOD_MOON_HELM, ItemID.BLOOD_MOON_HELM_29848),
	BLOOD_MOON_TASSETS(ItemID.BLOOD_MOON_TASSETS, ItemID.BLOOD_MOON_TASSETS_29847),
	BLUE_MOON_SPEAR(ItemID.BLUE_MOON_SPEAR, ItemID.BLUE_MOON_SPEAR_29849),
	BLUE_MOON_CHESTPLATE(ItemID.BLUE_MOON_CHESTPLATE, ItemID.BLUE_MOON_CHESTPLATE_29843),
	BLUE_MOON_HELM(ItemID.BLUE_MOON_HELM, ItemID.BLUE_MOON_HELM_29845),
	BLUE_MOON_TASSETS(ItemID.BLUE_MOON_TASSETS, ItemID.BLUE_MOON_TASSETS_29844),
	ECLIPSE_ATLATL(ItemID.ECLIPSE_ATLATL, ItemID.ECLIPSE_ATLATL_29851),
	ECLIPSE_MOON_CHESTPLATE(ItemID.ECLIPSE_MOON_CHESTPLATE, ItemID.ECLIPSE_MOON_CHESTPLATE_29840),
	ECLIPSE_MOON_HELM(ItemID.ECLIPSE_MOON_HELM, ItemID.ECLIPSE_MOON_HELM_29842),
	ECLIPSE_MOON_TASSETS(ItemID.ECLIPSE_MOON_TASSETS, ItemID.ECLIPSE_MOON_TASSETS_29841),
	ABYSSAL_DAGGER(ItemID.ABYSSAL_DAGGER, ItemID.ABYSSAL_DAGGER_P, ItemID.ABYSSAL_DAGGER_P_13269, ItemID.ABYSSAL_DAGGER_P_13271, 27861, ItemID.ABYSSAL_DAGGER_BHP, ItemID.ABYSSAL_DAGGER_BHP_27865, ItemID.ABYSSAL_DAGGER_BHP_27867),
	;

	private static final Map<Integer, EquipmentData> itemData = new HashMap<>();

	@Getter
	private final int itemId; // main id to be used for stat lookups
	@Getter
	private final int[] additionalIds; // extra ids that might represent the same item (like LMS versions, or a dragon dagger(p) = dds, or charged items etc)

	EquipmentData(int itemId)
	{
		this.itemId = itemId;
		this.additionalIds = null;
	}

	EquipmentData(int itemId, int... itemIds)
	{
		this.itemId = itemId;
		this.additionalIds = itemIds;
	}

	// Get the saved EquipmentData for a given itemId (could be null)
	public static EquipmentData fromId(int itemId)
	{
		return itemData.get(itemId);
	}

	// get currently selected weapon ammo, based on weapon used & configured bolt choice.
	public static RangeAmmoData getWeaponAmmo(EquipmentData weapon)
	{
		if (ArrayUtils.contains(RangeAmmoData.BoltAmmo.WEAPONS_USING, weapon))
		{
			return PvpPerformanceTrackerPlugin.CONFIG.boltChoice();
		}
		else if (ArrayUtils.contains(RangeAmmoData.StrongBoltAmmo.WEAPONS_USING, weapon))
		{
			return PvpPerformanceTrackerPlugin.CONFIG.strongBoltChoice();
		}
		else if (ArrayUtils.contains(RangeAmmoData.DartAmmo.WEAPONS_USING, weapon))
		{
			return PvpPerformanceTrackerPlugin.CONFIG.bpDartChoice();
		}
		else if (weapon == HEAVY_BALLISTA || weapon == LIGHT_BALLISTA)
		{
			return RangeAmmoData.OtherAmmo.DRAGON_JAVELIN;
		}
		else if (weapon == DARK_BOW)
		{
			return RangeAmmoData.OtherAmmo.DRAGON_ARROW;
		}
		else if (weapon == KARILS_CROSSBOW)
		{
			return RangeAmmoData.OtherAmmo.BOLT_RACK;
		}
		else if (weapon == HUNTERS_SUNLIGHT_CROSSBOW)
		{
			return RangeAmmoData.OtherAmmo.MOONLIGHT_ANTLER_BOLTS;
		}
		else if (weapon == MAGIC_SHORTBOW || weapon == MAGIC_SHORTBOW_I)
		{
			return RangeAmmoData.OtherAmmo.AMETHYST_ARROWS;
		}

		return null;
	}

	static
	{
		for (EquipmentData data : EquipmentData.values())
		{
			itemData.putIfAbsent(data.getItemId(), data);
			if (data.additionalIds != null && data.additionalIds.length > 0)
			{
				for (int id : data.additionalIds)
				{
					itemData.putIfAbsent(id, data);
				}
			}
		}
	}

	public enum VoidStyle
	{
		VOID_MELEE(1.1, 1.1),
		VOID_RANGE(1.1, 1.1),
		VOID_MAGE(1.45, 1),
		VOID_ELITE_MELEE(1.1, 1.1),
		VOID_ELITE_RANGE(1.125, 1.125),
		VOID_ELITE_MAGE(1.45, 1.025),
		NONE(1, 1);

		public double accuracyModifier;
		public double dmgModifier;

		VoidStyle(double accuracyModifier, double dmgModifier)
		{
			this.accuracyModifier = accuracyModifier;
			this.dmgModifier = dmgModifier;
		}

		// return a void style for a given PlayerComposition
		public static VoidStyle getVoidStyleFor(int[] playerComposition)
		{
			if (playerComposition == null) { return NONE; }
			playerComposition = PvpPerformanceTrackerUtils.fixItemIds(playerComposition);

			EquipmentData gloves = EquipmentData.fromId(playerComposition[KitType.HANDS.getIndex()]);

			if (gloves != EquipmentData.VOID_GLOVES) { return NONE; }

			EquipmentData helm = EquipmentData.fromId(playerComposition[KitType.HEAD.getIndex()]);
			EquipmentData torso = EquipmentData.fromId(playerComposition[KitType.TORSO.getIndex()]);
			EquipmentData legs = EquipmentData.fromId(playerComposition[KitType.LEGS.getIndex()]);

			if (torso == EquipmentData.VOID_BODY && legs == EquipmentData.VOID_LEGS)
			{
				return helm == EquipmentData.VOID_MAGE_HELM ? VOID_MAGE
					: helm == EquipmentData.VOID_RANGE_HELM ? VOID_RANGE
					: helm == EquipmentData.VOID_MELEE_HELM ? VOID_MELEE
					: NONE;
			}
			else if (torso == EquipmentData.VOID_ELITE_BODY && legs == EquipmentData.VOID_ELITE_LEGS)
			{
				return helm == EquipmentData.VOID_MAGE_HELM ? VOID_ELITE_MAGE
					: helm == EquipmentData.VOID_RANGE_HELM ? VOID_ELITE_RANGE
					: helm == EquipmentData.VOID_MELEE_HELM ? VOID_ELITE_MELEE
					: NONE;
			}

			return NONE;
		}
	}
}
